@page "/Artistas"
@inject ArtistaAPI artistaAPI

<MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
    <MudText Class="mb-4" Typo="Typo.h4">Artistas cadastrados</MudText>
    <MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
</MudStack>

@if (artistasPorPagina is not null)
{
    <MudGrid Class="my-18">
    @foreach (var artista in artistasPorPagina)
        {
            <MudItem xs="3">
                <CardArtista Artista="artista" />
            </MudItem>
        }
        </MudGrid>
}

@code {
    private ICollection<ArtistaResponse>? artistas;
    private int tamanho = 8;
    private int totalItens;
    private int totalPaginas;
    private ICollection<ArtistaResponse>? artistasPorPagina;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            artistas = await artistaAPI.GetArtistasAsync();
            if (artistas is not null)
            {
                artistas = artistas.OrderByDescending(a => a.Id).ToList();
                totalItens = artistas.Count();
                totalPaginas = Convert.ToInt32(Math.Ceiling((totalItens * 1.0) / tamanho));
                this.PaginaMudou(1);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ocorreu um erro: {ex.Message}");
        }
    }
    private void PaginaMudou(int numeroPagina)
    {
        int indice = numeroPagina - 1;
        artistasPorPagina = artistas!
        .Skip(tamanho * indice)
        .Take(tamanho)
        .ToList();
    }
}
