@page "/EditarArtista/{NomeArtista}"
@inject ArtistaAPI artistaApi;
@inject NavigationManager navigationManager;

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-18" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição de Artista</MudText>

    <MudForm>
        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista" Variant="Variant.Outlined"
            @bind-Value="nome" Required="true" RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista" Variant="Variant.Outlined"
            @bind-Value="biografia" Lines="4" Required="true" RequiredError="Campo obrigatório." />

        <div class="d-flex justify-end mt-4" style="gap: 8px;">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="background-color: #a79efc;">
                Voltar
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="Editar">
                Salvar
            </MudButton>
            <MudButton Variant="Variant.Filled" @onclick="Deletar" Color="Color.Secondary">
                Deletar
            </MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    private string? nome;
    private string? biografia;
    private string? fotoPerfil;
    [Parameter]
    public string? NomeArtista { get; set; }
    public ArtistaResponse? Artista { get; set; }
    private async Task Editar()
    {
        var requestEdit = new ArtistaRequestEdit(Artista.Id!, nome!, biografia!, fotoPerfil);
        await artistaApi.UpdateArtistaAsync(requestEdit);
        navigationManager.NavigateTo("/Artistas");
    }
    private async Task Deletar()
    {
        await artistaApi.DeleteArtistaAsync(Artista.Id);
        navigationManager.NavigateTo("/Artistas");
    }
    protected override async Task OnInitializedAsync()
    {
        Artista = await artistaApi.GetArtistaPorNomeAsync(NomeArtista!);
        nome = Artista.Nome;
        biografia = Artista.Bio;
    }
}
